# terraform-docs Configuration File
#
# This file (.terraform-docs.yml) is used by default by terraform-docs. It is
# used to generate the README for this Terraform module.
#
# To generate documentation, execute the following:
#
#   ```
#   terraform-docs .
#   ```
#
# See the terraform-docs documentation for more information:
#   https://github.com/terraform-docs/terraform-docs/tree/master/docs

formatter: markdown

header-from: main.tf
footer-from: ""

recursive:
  enabled: false
  path: .

sections:
  hide-all: false
  hide: [requirements, providers, modules]
  show-all: true
  show: []

output:
  file: "README.md"
  mode: replace
  template: |-
    # AWS S3 Backend Terraform Module

    [![MIT License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/infrable-io/terraform-aws-s3-backend/blob/master/LICENSE)
    [![Maintained by Infrable](https://img.shields.io/badge/Maintained%20by-Infrable-000000)](https://infrable.io)

    A Terraform module for creating an Amazon S3 bucket and DynamoDB table for storing Terraform state.

    ## Overview

    From the Terraform documentation on [S3 backends](https://www.terraform.io/language/settings/backends/s3)...

    >Stores the state as a given key in a given bucket on [Amazon S3](https://aws.amazon.com/s3). This backend also supports state locking and consistency checking via [DynamoDB](https://aws.amazon.com/dynamodb), which can be enabled by setting the `dynamodb_table` field to an existing DynamoDB table name.

    ## Usage

    ```hcl
    terraform {
      backend "s3" {
        bucket         = "<s3_bucket>"
        key            = "<path/to/key>"
        region         = "us-east-1"
        dynamodb_table = "<dynamodb_table>"
      }
    }
    ```

    ## Chicken and Egg Problem

    Where does one store the Terraform state of the infrastructure for storing Terraform state? Answer: locally. Before using the Amazon S3 bucket and DynamoDB table created by this module to store its own state, you must first store state on the local filesystem. Thereafter, state can be stored using the S3 backend.

    **Step 1**: Initialize Terraform using local backend

    ```
    $ terraform init
    Initializing modules...
    ...

    Initializing the backend...
    ...

    Terraform has been successfully initialized!
    ```

    **Step 2**: Apply state

    ```
    $ terraform apply
    ...

    Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
    ```

    **Step 3**: Reconfigure Terraform with S3 backend

    ```hcl
    terraform {
      backend "s3" {
        bucket         = "<s3_bucket>"
        key            = "<path/to/key>"
        region         = "us-east-1"
        dynamodb_table = "<dynamodb_table>"
      }
    }
    ```

    ```
    $ terraform init -reconfigure
    Initializing modules...

    Initializing the backend...
    Do you want to copy existing state to the new backend?
      Pre-existing state was found while migrating the previous "local" backend to the
      newly configured "s3" backend. No existing state was found in the newly
      configured "s3" backend. Do you want to copy this state to the new "s3"
      backend? Enter "yes" to copy and "no" to start with an empty state.

      Enter a value: yes
    ```

    ## Terraform Module Documentation

    <!-- BEGIN_TF_DOCS -->
    {{ .Content }}
    <!-- END_TF_DOCS -->

output-values:
  enabled: false
  from: ""

sort:
  enabled: true
  by: name

settings:
  anchor: true
  color: true
  default: true
  description: false
  escape: true
  hide-empty: false
  html: true
  indent: 2
  lockfile: true
  read-comments: true
  required: true
  sensitive: true
  type: true
